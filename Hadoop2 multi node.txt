# Connect To the DataCenter with Public Key or Private in case of windows through Putty.

ssh -i Downloads/file.pem ubuntu@public_dns_address

# Update the system
sudo apt-get update && sudo apt-get dist-upgrade -y

# Copy public key on to the DataCenter main server
open a new terminal 
scp -i multi.pem multi.pem ubuntu@public_dns:~/.ssh
close the terminal, go back to configurationg terminal


# Create a Hadoop user for accessing HDFS
sudo addgroup hadoop
sudo adduser hduser --ingroup hadoop 
sudo adduser hduser sudo
sudo su hduser

# Create local key
ssh-keygen
cd .ssh

cat id_rsa.pub >> authorized_keys
cd (come on home directory)

# Copy the instance public key (multi.pem) to hduser's directory
sudo su (come on root)
cp /home/ubuntu/.ssh/windows.pem /home/hduser/.ssh/

chown hduser:hadoop /home/hduser/.ssh/windows.pem
exit

# Install Java 8
sudo apt-get install -y python-software-properties debconf-utils
sudo add-apt-repository -y ppa:webupd8team/java
sudo apt-get update
sudo apt-get install -y oracle-java8-installer

# Download and Install Hadoop
wget -c http://www-eu.apache.org/dist/hadoop/common/stable/hadoop-2.9.1.tar.gz
tar -xzvf hadoop-2.9.2.tar.gz
sudo mv hadoop-2.9.2 /usr/local/hadoop
sudo chown -R hduser:hadoop /usr/local/hadoop

# Set Enviornment Variable
readlink -f $(which java)
nano ~/.bashrc
# -- HADOOP ENVIRONMENT VARIABLES START -- #
export JAVA_HOME=/usr/lib/jvm/java-8-oracle
export HADOOP_HOME=/usr/local/hadoop
export PATH=$PATH:$HADOOP_HOME/bin
export PATH=$PATH:$HADOOP_HOME/sbin
export PATH=$PATH:/usr/local/hadoop/bin/
export HADOOP_MAPRED_HOME=$HADOOP_HOME
export HADOOP_COMMON_HOME=$HADOOP_HOME
export HADOOP_HDFS_HOME=$HADOOP_HOME
export YARN_HOME=$HADOOP_HOME
export HADOOP_CONF_DIR=/usr/local/hadoop/etc/hadoop
export PDSH_RCMD_TYPE=ssh
# -- HADOOP ENVIRONMENT VARIABLES END -- #

$ source ~/.bashrc

cd /usr/local/hadoop/etc/hadoop/

#Update hadoop-env.sh
nano hadoop-env.sh
export JAVA_HOME=/usr/lib/jvm/java-8-oracle
export HADOOP_LOG_DIR=/var/log/hadoop

sudo mkdir /var/log/hadoop/
sudo chown -R hduser:hadoop /var/log/hadoop

#Disable IPV6
sudo nano /etc/sysctl.conf
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
sudo sysctl -p

#Disable FireWall iptables
sudo iptables -L -n
sudo ufw status
sudo ufw disable

#Disabling Transparent Hugepage Compaction
--->> #Red Hat/CentOS: /sys/kernel/mm/redhat_transparent_hugepage/defrag
--->> #Ubuntu/Debian, OEL, SLES: /sys/kernel/mm/transparent_hugepage/defrag

cat /sys/kernel/mm/transparent_hugepage/defrag

sudo sed -i '/exit 0/d' /etc/rc.local

#Use the below command to disable hugepages on terminal itself

sudo su -c 'cat >>/etc/rc.local <<EOL
if test -f /sys/kernel/mm/transparent_hugepage/enabled; then
  echo never > /sys/kernel/mm/transparent_hugepage/enabled
fi
if test -f /sys/kernel/mm/transparent_hugepage/defrag; then
   echo never > /sys/kernel/mm/transparent_hugepage/defrag 
fi
exit 0
EOL'

sudo -i (this command is used to become root user just for once, can fire only one command)

source /etc/rc.local


# Set Swappiness
sudo sysctl -a | grep vm.swappiness
sudo sysctl vm.swappiness=1
setting swappiness to 1 is best practice.

# Configure NTP (network time protocol)
timedatectl status
timedatectl list-timezones
sudo timedatectl set-timezone Asia/Kolkata
sudo ntpq -p
sudo apt install ntp -y
sudo nano /etc/ntp.conf

##Configure SSH Password less logins
sudo su -c touch /home/hduser/.ssh/config; echo "Host *\n StrictHostKeyChecking no\n
UserKnownHostsFile=/dev/null" > /home/hduser/.ssh/config
sudo service ssh restart


----------****** Create a snapshot at this point ******-----------------
Create 4 nodes from this image

#sudo nano /etc/hosts and include these lines:FQDN

172.31.29.56 ip-172-31-29-56.ec2.internal nn
172.31.27.96 ip-172-31-27-96.ec2.internal rm
172.31.18.137 ip-172-31-18-137.ec2.internal 1dn
172.31.23.79 ip-172-31-23-79.ec2.internal 2dn
172.31.16.236 ip-172-31-16-236.ec2.internal 3dn

Do this for all nodes.


# Configure .profile (make sure you are on NN) 
 nano .profile
 eval `ssh-agent` ssh-add /home/hduser/.ssh/windows.pem

 source .profile

 scp .profile to each node
 scp .profile hduser@rm:/home/hduser/  (<--- do this for all nodes)
 (Note : ssh to all nodes from nn)

# Install and Configure dsh
sudo apt install dsh -y
sudo nano /etc/dsh/machines.list
#localhost
nn
rm
1dn
2dn
3dn
dsh -a uptime
dsh -a source .profile

cd /usr/local/hadoop/etc/hadoop

# Configure masters and slaves
nano masters
rm

nano slaves
1dn
2dn
3dn

#Update core-site.xml
nano core-site.xml
<property>
    <name>fs.defaultFS</name>
    <value>hdfs://nn:9000</value>
  </property>

#Update hdfs-site.xml on name node 
mkdir -p /usr/local/hadoop/data/hdfs/namenode
nano hdfs-site.xml
<property>
    <name>dfs.replication</name>
    <value>3</value>
  </property>
  <property>
    <name>dfs.namenode.name.dir</name>
    <value>file:///usr/local/hadoop/data/hdfs/namenode</value>
  </property>
   <property>
    <name>dfs.datanode.data.dir</name>
    <value>file:///usr/local/hadoop/data/hdfs/datanode</value>
  </property> 


#Create proper directories on datanode's

dsh -m 1dn,2dn,3dn mkdir -p /usr/local/hadoop/data/hdfs/datanode
 


#Update yarn-site.xml
nano yarn-site.xml
<property>
    <name>yarn.nodemanager.aux-services</name>
    <value>mapreduce_shuffle</value>
  </property>
  <property>
    <name>yarn.resourcemanager.hostname</name>
    <value>rm</value>
  </property>

#Update mapred-site.xml

cp mapred-site.xml.template mapred-site.xml
nano mapred-site.xml
<property>
    <name>mapreduce.jobtracker.address</name>
    <value>rm:54311</value>
  </property>
  <property>
    <name>mapreduce.framework.name</name>
    <value>yarn</value>
  </property>

sudo chown -R hduser:hadoop $HADOOP_HOME

#SCP all the files
cd /usr/local/hadoop/etc/hadoop
For all nodes, with same command replacing rm with 1dn,2dn,3dn
scp core-site.xml hdfs-site.xml mapred-site.xml yarn-site.xml slaves rm:/usr/local/hadoop/etc/hadoop
cd
make sure we are on namenode (nn)

#Format Namenode

hdfs namenode -format


# Start the cluster
run below command on nn

start-dfs.sh

before firing start-yarn.sh we will have to go to secondary master we created (rm)
ssh rm, and then fire this below command

start-yarn.sh

after starting yarn we will have exit and come on namenode or nn
 
dsh -a jps


hdfs dfs -mkdir /user
hdfs dfs -mkdir /user/hduser
hdfs dfs -put hadoop-2.9.2.tar.gz /user/hduser
hdfs dfs -ls 
hdfs dfs -ls -R

hadoop jar /usr/local/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.9.2.jar pi  5 10

port numbers
name Node  	: 50070
data Node  	: 50075
Secondary nn 	: 50090
resource manager: 8088
Node Manager	: 8042
cloudera manager: 7180 / 7183, with tls/ssl 7183, without 7180
job history server : 19888 
 

